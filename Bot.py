import telebot
import config
import random
from telebot import types, TeleBot
import datetime
import COVID19Py
import pyowm
bot: TeleBot = telebot.TeleBot(config.TOKEN)
owm = pyowm.OWM(config.TOKEN2, language = "ru")
covid19 = COVID19Py.COVID19()
smiles = [
	'‚ù§','üòò','üòÇ','‚ò∫','üò≥','üòö','üòÖ','üôä','üòê','üòã','üòÜ','üòÉ','ü§£','üòç','ü•∞','üòò','üòù','üßê','ü§¨','üò°','ü§Ø'
]
hello = [
	'Good morning', 'Good evening, i"m the dispatcher ', 'Good night', 'You are welcome', 'Thanks', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 'Hello', 'Hi', '–ü—Ä–∏–≤–µ—Ç','–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —è –¥–∏—Å–ø–µ—Ç—á–µ—Ä'
]
@bot.message_handler(commands = ['start'])
def welcome(message):

    #keybroad
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard = True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("ü§í COVID19")
    item3 = types.KeyboardButton('‚ô† –ò–≥—Ä–∞')
    item5 = types.KeyboardButton('üï∞ –í—Ä–µ–º—è')
    item4 = types.KeyboardButton('üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä')
    item6 = types.KeyboardButton('‚õÖÔ∏è–ü–æ–≥–æ–¥–∞')
    markup.add(item1, item2, item3)
    markup.add(item4,item5,item6)
    bot.send_message(message.chat.id,
                     f"{random.choice(hello)}" + ", {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –∞ —Ç—ã –Ω–µ—Ç, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±–µ –∂–∏–∑–Ω—å ".format(
                         message.from_user, bot.get_me()) + f"{random.choice(smiles)}",
                     parse_mode='html', reply_markup = markup)
    print(message.from_user)
@bot.callback_query_handler(func = lambda call: True) #–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def callback_woker(call):
	try:
	    if call.data == 'yes':
	        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True )
	        item1 = types.KeyboardButton("–î–∞ ")
	        item2 = types.KeyboardButton("–ù–µ—Ç")
	        markup.add(item1, item2)
	        bot.send_message(call.message.chat.id, '–ê —è –¥–æ–≤–µ—Ä—è—é —Ç–µ–±–µ üòè')
	        bot.send_message(call.message.chat.id, '–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –∏–≥—Ä–µ? üòà ', reply_markup = markup )
	    elif call.data == 'no':
	        bot.send_message(call.message.chat.id, '–ò –Ø –¢–ï–ë–ï –ù–ï –î–û–í–ï–†–Ø–Æ')
	    elif call.data == 'one':
	        bot.send_message(call.message.chat.id, '–ò —Ç–∞–∫, —É —Ç–µ–±—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞')
	    elif call.data == 'two':
	        bot.send_message(call.message.chat.id, '–ò —Ç–∞–∫, —É —Ç–µ–±—è —Ä–æ–≤–Ω–æ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏')
	    elif call.data == 'Russia':
	        location = covid19.getLocationByCountryCode("RU")
	        date = location[0]['last_updated'].split('T')
	        time = date[1].split(".")
	        final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –†–æ—Å—Å–∏—è:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
	                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
	                        f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
	                        f"{location[0]['latest']['deaths']:,}"
	        bot.send_message(call.message.chat.id, final_message, parse_mode='html')
	    elif call.data == 'Usa':
	        location = covid19.getLocationByCountryCode("US")
	        date = location[0]['last_updated'].split('T')
	        time = date[1].split(".")
	        final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –°–®–ê:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n"\
	                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>"\
	                        f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
	                        f"{location[0]['latest']['deaths']:,}"
	        bot.send_message(call.message.chat.id, final_message, parse_mode='html')

	    elif call.data == 'Ukraine':
	        location = covid19.getLocationByCountryCode("UA")
	        date = location[0]['last_updated'].split('T')
	        time = date[1].split(".")
	        final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –£–∫—Ä–∞–∏–Ω–∞:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
	                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
	                        f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
	                        f"{location[0]['latest']['deaths']:,}"
	        bot.send_message(call.message.chat.id, final_message, parse_mode='html')
	    elif call.data == 'All':
	        location = covid19.getLatest()
	        final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É:</u>\n<b>–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location['confirmed']:,}\n<b>–°–º–µ—Ç—Ä–µ–π: </b>{location['deaths']:,}"
	        bot.send_message(call.message.chat.id, final_message, parse_mode = 'html')

	    elif call.data == 'Numerator':

	        keyboard = types.InlineKeyboardMarkup()
	        Monday = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='Monday')
	        keyboard.add(Monday)
	        Tuesday = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data='Tuesday')
	        keyboard.add(Tuesday)
	        Wednesday = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data='Wednesday')
	        keyboard.add(Wednesday)
	        Thursday = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data='Thursday')
	        keyboard.add(Thursday)
	        Friday = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data='Friday')
	        keyboard.add(Friday)
	        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ", reply_markup = keyboard)
	        #bot.edit_message_reply_markup(call.message.chat.id, message_id = call.message.message_id-1, reply_markup = '')
	        # remove inline buttons

	       # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
	        #                          text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")
	    elif call.data == 'Monday':
	        bot.send_message(call.message.chat.id, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –¢–ê–£ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n2 –ø–∞—Ä–∞: –§–ò–ó - –†–ê \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) ')
	    elif call.data == 'Tuesday':
	        bot.send_message(call.message.chat.id, '–í—Ç–æ—Ä–Ω–∏–∫ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–õ–µ–∫—Ü–∏—è) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–∏–∫–∞ (–ö—É—Ä—Å–æ–≤–∞—è) ')
	    elif call.data == 'Wednesday':
	        bot.send_message(call.message.chat.id, '–°—Ä–µ–¥–∞ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –¢–ê–£ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –¢–ê–£ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n  ')
	    elif call.data == 'Thursday':
	        bot.send_message(call.message.chat.id, '–ß–µ—Ç–≤–µ—Ä–≥ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n  ')
	    elif call.data == 'Friday':
	        bot.send_message(call.message.chat.id, '–ü—è—Ç–Ω–∏—Ü–∞ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n2 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞) ')
	    elif call.data == 'Monday1':
	        bot.send_message(call.message.chat.id,  '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n2 –ø–∞—Ä–∞: –§–ò–ó - –†–ê \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) ')
	    elif call.data == 'Tuesday1':
	        bot.send_message(call.message.chat.id, '–í—Ç–æ—Ä–Ω–∏–∫ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n2 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ü—Ä–∞—Ç–∏–∫–∞) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–ö—É—Ä—Å–æ–≤–∞—è) ')
	    elif call.data == 'Wednesday1':
	        bot.send_message(call.message.chat.id, '–°—Ä–µ–¥–∞ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –î–∞—Ç—á–∏–∫–∏ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –î–∞—Ç—á–∏–∫–∏ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) ')
	    elif call.data == 'Thursday1':
	        bot.send_message(call.message.chat.id, '–ß–µ—Ç–≤–µ—Ä–≥ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n 3 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞)')
	    elif call.data == 'Friday1':
	      	bot.send_message(call.message.chat.id, '–ü—è—Ç–Ω–∏—Ü–∞ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n2 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n3 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–µ–∫—Ü–∏—è) ')
	    elif call.data == 'Denominator':

	        keyboard = types.InlineKeyboardMarkup()
	        Monday1 = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='Monday1')
	        keyboard.add(Monday1)
	        Tuesday1 = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data='Tuesday1')
	        keyboard.add(Tuesday1)
	        Wednesday1 = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data='Wednesday1')
	        keyboard.add(Wednesday1)
	        Thursday1 = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data='Thursday1')
	        keyboard.add(Thursday1)
	        Friday1 = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data='Friday1')
	        keyboard.add(Friday1)
	        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ', reply_markup=keyboard)

	    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= call.message.text,
                          reply_markup='')
	except Exception:
		bot.edit_message_text(call.message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
@bot.message_handler(content_types = ['text'])
def main(message): #–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
	try:
	    if message.chat.type == 'private':
	        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
	            bot.send_message(message.chat.id, str(random.randint(0,100)))
	        elif message.text == '‚ô† –ò–≥—Ä–∞':
	            keyboard = types.InlineKeyboardMarkup()
	            key_yes = types.InlineKeyboardButton(text=' –î–∞', callback_data='yes')
	            keyboard.add(key_yes)
	            key_no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no')
	            keyboard.add(key_no)
	            bot.send_message(message.chat.id, '–¢—ã –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ?', reply_markup = keyboard)
	        elif message.text == '–ù–µ—Ç':
	            bot.register_next_step_handler(message, welcome)
	            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
	        elif message.text == '–î–∞':
	            keyboard = types.InlineKeyboardMarkup()
	            key_yes = types.InlineKeyboardButton(text='–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥–µ–ª (-‚ôæ: ‚ôæ+)', callback_data='one')
	            keyboard.add(key_yes)
	            key_no = types.InlineKeyboardButton(text="–ü–æ–ø—ã—Ç–∫–∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –Ω—É–ª—é üîú", callback_data='two')
	            keyboard.add(key_no)
	            bot.send_message(message.chat.id, '–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–æ–ø—ã—Ç–æ–∫?) üôÄ ', reply_markup=keyboard)
	        elif message.text == 'üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä':
	            keyboard = types.InlineKeyboardMarkup()
	            key_yes = types.InlineKeyboardButton(text='–ß–∏—Å–ª–∏—Ç–µ–ª—å', callback_data='Numerator')
	            keyboard.add(key_yes)
	            key_no = types.InlineKeyboardButton(text="–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", callback_data='Denominator')
	            keyboard.add(key_no)
	            bot.send_message(message.chat.id, '–ß–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å?', reply_markup=keyboard)
	        elif message.text == 'üï∞ –í—Ä–µ–º—è':
	            date2 = datetime.datetime(2020, 6, 1)
	            ic = datetime.datetime.now().isocalendar()
	            b = '–ß–∏—Å–ª–∏—Ç–µ–ª—å' if ic[1] % 2 != 0 else '–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'
	            date_time = datetime.datetime.now(tz = None)
	            date_t = date2 - date_time
	            bot.reply_to(message, "–°–µ–π—á–∞—Å:  " + date_time.strftime("%d-%m-%Y %H:%M") + f"- {b}" + f"\n–î–æ —Å–µ—Å—Å–∏–∏: {str(date_t.days)} –¥–Ω–µ–π")
	            #bot.reply_to(message, f"–î–æ —Å–µ—Å—Å–∏–∏: {str(date_t.days)} –¥–Ω–µ–π\n–°–µ–π—á–∞—Å: {b}")
	        elif message.text == "ü§í COVID19":
	            keyboard = types.InlineKeyboardMarkup()
	            key_yes = types.InlineKeyboardButton(text='–†–æ—Å—Å–∏—è', callback_data='Russia')
	            keyboard.add(key_yes)
	            key_no = types.InlineKeyboardButton(text="–°–®–ê", callback_data='Usa')
	            keyboard.add(key_no)
	            key_go = types.InlineKeyboardButton(text="–£–∫—Ä–∞–∏–Ω–∞", callback_data='Ukraine')
	            keyboard.add(key_go)
	            key_mo = types.InlineKeyboardButton(text="–í–æ –≤—Å–µ–º –º–∏—Ä–µ", callback_data='All')
	            keyboard.add(key_mo)
	            bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?', reply_markup=keyboard)
	        elif message.text == '‚õÖÔ∏è–ü–æ–≥–æ–¥–∞':
	        	observation = owm.weather_at_place('–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª')
	        	w = observation.get_weather()
	        	temp = w.get_temperature('celsius')['temp']
	        	clothes = '–û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ' if temp < 20 else '–ù–∞–¥–µ–≤–∞–π –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É'
	        	bot.send_message(message.chat.id, '–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å ' + w.get_detailed_status() + '\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ —Ä–∞–π–æ–Ω–µ '+ str(int(temp)) + ' ¬∞C\n' + clothes)
	        else:
	            bot.send_message(message.chat.id, f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å {random.choice(smiles)}')

	except Exception:
		bot.send_message(message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
# def games(message):
#     bot.send_message(message.chat.id, 'Hello')
#     bot.register_next_step_handler(message, welcome)

bot.polling(none_stop = True)
 